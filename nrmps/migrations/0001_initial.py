# Generated by Django 5.2.5 on 2025-09-02 18:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("full_name", models.CharField(blank=True, max_length=255, null=True)),
                ("disabled", models.BooleanField(blank=True, default=False, null=True)),
                ("status", models.CharField(default="pending", max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Simulation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("public", models.BooleanField(default=True)),
                ("description", models.TextField(default="")),
                (
                    "iterations",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("status", models.CharField(default="pending", max_length=50)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="simulations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the school.", max_length=255),
                ),
                ("capacity", models.IntegerField(help_text="Capacity of the school.")),
                ("score", models.FloatField(help_text="Score of the school.")),
                (
                    "meta_stddev",
                    models.FloatField(
                        default=0.0, help_text="Standard deviation of the score."
                    ),
                ),
                (
                    "score_meta",
                    models.JSONField(
                        default=dict,
                        help_text='Meta score names and value {"Research":5, "Reputation": 10} for the score.',
                    ),
                ),
                (
                    "meta_stddev_preference",
                    models.FloatField(
                        default=0.0, help_text="Standard deviation of the preference."
                    ),
                ),
                (
                    "meta_preference",
                    models.JSONField(
                        default=dict,
                        help_text='Meta score names and value {"USMLE Setp 2":5, "Grades": 10} for the preference.',
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schools",
                        to="nrmps.simulation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SimulationConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "number_of_applicants",
                    models.IntegerField(
                        default=200,
                        help_text="Total number of applicants to generate.",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                    ),
                ),
                (
                    "number_of_schools",
                    models.IntegerField(
                        default=10,
                        help_text="Total number of schools to generate.",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "applicant_score_mean",
                    models.FloatField(
                        default=0,
                        help_text="Mean of the applicants' base scores.",
                        validators=[
                            django.core.validators.MinValueValidator(-1000),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "applicant_score_stddev",
                    models.FloatField(
                        default=25,
                        help_text="Std. dev. of the applicants' base scores (>= 0).",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "applicant_interview_limit",
                    models.IntegerField(
                        default=5,
                        help_text="Max number of interviews each applicant can attend.",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "applicant_meta_preference",
                    models.JSONField(
                        default=list,
                        help_text="List of applicant preference meta fields (e.g., program_size, prestige).",
                    ),
                ),
                (
                    "applicant_meta_preference_stddev",
                    models.FloatField(
                        default=10,
                        help_text="Std. dev. of meta preference scores (>= 0).",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "applicant_meta_scores_stddev",
                    models.FloatField(
                        default=10,
                        help_text="Std. dev. of meta scores per applicant (>= 0).",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "applicant_pre_interview_rating_error",
                    models.FloatField(
                        default=0.1,
                        help_text="Pre-interview rating error stddev",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "applicant_post_interview_rating_error",
                    models.FloatField(
                        default=0.02,
                        help_text="Pre-interview rating error stddev",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "school_score_mean",
                    models.FloatField(
                        default=0,
                        help_text="Mean of the schools' base scores.",
                        validators=[
                            django.core.validators.MinValueValidator(-1000),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "school_score_stddev",
                    models.FloatField(
                        default=25,
                        help_text="Std. dev. of the schools' base scores (>= 0).",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "school_capacity_mean",
                    models.FloatField(
                        default=20, help_text="Mean capacity per school."
                    ),
                ),
                (
                    "school_capacity_stddev",
                    models.FloatField(
                        default=10,
                        help_text="Std. dev. of capacity per school (>= 0).",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "school_interview_limit",
                    models.FloatField(
                        default=10,
                        help_text="Max number of interviews each school can conduct Inpercent of capacity.",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "school_meta_preference",
                    models.JSONField(
                        default=list,
                        help_text="List of school preference meta fields (e.g., board_scores, research).",
                    ),
                ),
                (
                    "school_meta_preference_stddev",
                    models.FloatField(
                        default=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "school_meta_scores_stddev",
                    models.FloatField(
                        default=10,
                        help_text="Std. dev. of meta scores per school (>= 0).",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "school_pre_interview_rating_error",
                    models.FloatField(
                        default=0.1,
                        help_text="The stddev scoreing error used to calculate the observed score for each student",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "school_post_interview_rating_error",
                    models.FloatField(
                        default=0.02,
                        help_text="The stddev scoreing error used to calculate the observed score for each student",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configs",
                        to="nrmps.simulation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the student.", max_length=255),
                ),
                ("score", models.FloatField(help_text="Score of the student.")),
                (
                    "meta_stddev",
                    models.FloatField(
                        default=0.0, help_text="Standard deviation of the score."
                    ),
                ),
                (
                    "score_meta",
                    models.JSONField(
                        default=dict,
                        help_text='Meta score names and value {"USMLE Setp 2":5, "Grades": 10} for the score.',
                    ),
                ),
                (
                    "meta_stddev_preference",
                    models.FloatField(
                        default=0.0, help_text="Standard deviation of the preference."
                    ),
                ),
                (
                    "meta_preference",
                    models.JSONField(
                        default=dict,
                        help_text='Meta score names and value {"School size":5, "Reputation": 10} for the preference.',
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="students",
                        to="nrmps.simulation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("students_rank_of_school", models.IntegerField(blank=True, null=True)),
                ("schools_rank_of_student", models.IntegerField(blank=True, null=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="nrmps.school",
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="nrmps.simulation",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matches",
                        to="nrmps.student",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "school")},
            },
        ),
        migrations.CreateModel(
            name="Interview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("status", models.CharField(default="initialized", max_length=50)),
                (
                    "student_applied",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the student has been applied to the school.",
                    ),
                ),
                (
                    "student_signal",
                    models.IntegerField(
                        default=0,
                        help_text="Signal value from the student to the school",
                    ),
                ),
                (
                    "student_accepted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the student has been accepted to the school invitation to interview.",
                    ),
                ),
                (
                    "student_true_score_of_school",
                    models.FloatField(
                        blank=True,
                        help_text="True score of school with respect to student",
                        null=True,
                    ),
                ),
                (
                    "school_invited",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the school has been invited to the interview. Must have applied to school first",
                    ),
                ),
                (
                    "student_pre_observed_score_of_school",
                    models.FloatField(
                        blank=True,
                        help_text='Pre interview "total" score of student',
                        null=True,
                    ),
                ),
                (
                    "school_pre_observed_score_of_student",
                    models.FloatField(
                        blank=True,
                        help_text='Pre interview "total" score of school',
                        null=True,
                    ),
                ),
                (
                    "school_true_score_of_student",
                    models.FloatField(
                        blank=True,
                        help_text="True score of student with respect to school",
                        null=True,
                    ),
                ),
                (
                    "students_pre_rank_of_school",
                    models.IntegerField(
                        blank=True, help_text="Pre interview rank of student", null=True
                    ),
                ),
                (
                    "schools_pre_rank_of_student",
                    models.IntegerField(
                        blank=True, help_text="Pre interview rank of school", null=True
                    ),
                ),
                (
                    "student_post_observed_score_of_school",
                    models.FloatField(
                        blank=True,
                        help_text='Post interview "total score" of student',
                        null=True,
                    ),
                ),
                (
                    "school_post_observed_score_of_student",
                    models.FloatField(
                        blank=True,
                        help_text='Post interview "total" score of school',
                        null=True,
                    ),
                ),
                (
                    "students_post_rank_of_school",
                    models.IntegerField(
                        blank=True,
                        help_text="Post interview rank of student",
                        null=True,
                    ),
                ),
                (
                    "schools_post_rank_of_student",
                    models.IntegerField(
                        blank=True, help_text="Post interview rank of school", null=True
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interviews",
                        to="nrmps.school",
                    ),
                ),
                (
                    "simulation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interviews",
                        to="nrmps.simulation",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interviews",
                        to="nrmps.student",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "school")},
            },
        ),
    ]
